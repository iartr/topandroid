package solutions2_1

import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

/**
 * –†–ï–®–ï–ù–ò–ï –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø ‚Ññ2.1
 * 
 * ‚ö†Ô∏è –≠–¢–û–¢ –§–ê–ô–õ –ü–†–ï–î–ù–ê–ó–ù–ê–ß–ï–ù –¢–û–õ–¨–ö–û –î–õ–Ø –ú–ï–ù–¢–û–†–ê!
 * –°—Ç—É–¥–µ–Ω—Ç—ã –ù–ï –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –¥–æ —Å–¥–∞—á–∏ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã.
 * 
 * –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
 */

// ============================================================================
// –ß–ê–°–¢–¨ 1: EXTENSION FUNCTIONS
// ============================================================================

/**
 * 1.1 –ú–µ–¥–∏–∞–Ω–∞ —Å–ø–∏—Å–∫–∞
 * –ú–µ–¥–∏–∞–Ω–∞ - —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
 */
fun List<Int>.median(): Double? {
    if (this.isEmpty()) return null
    
    val sorted = this.sorted()
    val size = sorted.size
    
    return if (size % 2 == 0) {
        // –ß—ë—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —Å—Ä–µ–¥–Ω–µ–µ –¥–≤—É—Ö —Å—Ä–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        (sorted[size / 2 - 1] + sorted[size / 2]) / 2.0
    } else {
        // –ù–µ—á—ë—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —Å—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        sorted[size / 2].toDouble()
    }
}

/**
 * 1.2 –ú–æ–¥–∞ (—Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ —á–∏—Å–ª–æ)
 */
fun List<Int>.mode(): Int? {
    if (this.isEmpty()) return null
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ
    val counts = this.groupingBy { it }.eachCount()
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    val maxCount = counts.values.maxOrNull() ?: return null
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    return counts.entries.firstOrNull { it.value == maxCount }?.key
}

/**
 * 1.3 –°–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 */
val IntRange.middle: Int
    get() = (first + last) / 2

/**
 * 1.4 –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤ IntRange
 */
fun String.toIntRange(): IntRange? {
    val parts = this.split("-")
    if (parts.size != 2) return null
    
    val start = parts[0].trim().toIntOrNull() ?: return null
    val end = parts[1].trim().toIntOrNull() ?: return null
    
    return if (start <= end) start..end else null
}

// ============================================================================
// –ß–ê–°–¢–¨ 2: INLINE FUNCTIONS –ò REIFIED
// ============================================================================

/**
 * 2.1 –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –∑–∞–¥–∞—á–∏
 */
inline fun measureExecutionTime(taskName: String, block: () -> Unit) {
    val start = System.currentTimeMillis()
    block()
    val end = System.currentTimeMillis()
    println("  [$taskName] completed in ${end - start} ms")
}

/**
 * 2.2 –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
 * Reified –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø –≤ runtime
 */
inline fun <reified T> List<*>.sumByType(): Double {
    var sum = 0.0
    for (element in this) {
        if (element is T && element is Number) {
            sum += element.toDouble()
        }
    }
    return sum
}

/**
 * 2.3 –£—Å–ª–æ–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
inline fun <T> T.applyIf(condition: Boolean, block: T.() -> Unit): T {
    if (condition) {
        block()
    }
    return this
}

// ============================================================================
// –ß–ê–°–¢–¨ 3: –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –°–í–û–ô–°–¢–í–ê
// ============================================================================

/**
 * 3.1 –î–µ–ª–µ–≥–∞—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 */
class RangeDelegate(
    initialValue: Int,
    private val range: IntRange
) : ReadWriteProperty<Any?, Int> {
    
    private var value: Int = initialValue.coerceIn(range)
    
    override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return value
    }
    
    override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
        this.value = value.coerceIn(range)
    }
}

/**
 * 3.2 –î–µ–ª–µ–≥–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
class HistoryDelegate<T>(
    initialValue: T,
    private val maxHistory: Int = 10
) : ReadWriteProperty<Any?, T> {
    
    private var currentValue: T = initialValue
    private val history = mutableListOf(initialValue)
    
    override fun getValue(thisRef: Any?, property: KProperty<*>): T {
        return currentValue
    }
    
    override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {
        currentValue = value
        history.add(value)
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        while (history.size > maxHistory) {
            history.removeAt(0)
        }
    }
    
    fun getHistory(): List<T> = history.toList()
}

// ============================================================================
// –ß–ê–°–¢–¨ 4: –ö–õ–ê–°–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ì–†–´
// ============================================================================

class GameStatistics {
    // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    val startTime: Long by lazy {
        System.currentTimeMillis()
    }
    
    // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ (–∑–¥–µ—Å—å –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç.–∫. List –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π)
    private val attemptsList = mutableListOf<Int>()
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    var hintsUsed: Int by RangeDelegate(0, 0..10)
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    fun addAttempt(value: Int) {
        attemptsList.add(value)
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º extension-—Ñ—É–Ω–∫—Ü–∏–π
     */
    fun generateReport(): String {
        val currentTime = System.currentTimeMillis()
        val gameTimeSeconds = (currentTime - startTime) / 1000.0
        
        return buildString {
            appendLine("  üìä –û–¢–ß–Å–¢ –û –ò–ì–†–ï")
            appendLine("  ${"=".repeat(40)}")
            appendLine("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ${attemptsList.size}")
            
            if (attemptsList.isNotEmpty()) {
                appendLine("  –ü–æ–ø—ã—Ç–∫–∏: ${attemptsList.joinToString(", ")}")
                appendLine("  –ú–µ–¥–∏–∞–Ω–∞ –ø–æ–ø—ã—Ç–æ–∫: ${attemptsList.median()}")
                appendLine("  –ú–æ–¥–∞ (—á–∞—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞): ${attemptsList.mode()}")
                
                val min = attemptsList.minOrNull()
                val max = attemptsList.maxOrNull()
                appendLine("  –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ø—ã—Ç–æ–∫: $min - $max")
            }
            
            appendLine("  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: $hintsUsed")
            appendLine("  –í—Ä–µ–º—è –∏–≥—Ä—ã: ${"%.2f".format(gameTimeSeconds)} —Å–µ–∫")
            appendLine("  ${"=".repeat(40)}")
        }
    }
}

// ============================================================================
// –ß–ê–°–¢–¨ 5: –°–¢–†–ê–¢–ï–ì–ò–ò (–ë–û–ù–£–°)
// ============================================================================

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
interface DifficultyStrategy {
    fun getMaxAttempts(): Int
    fun getRange(): IntRange
    fun getHintPenalty(): Int
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
 */
fun createDifficultyStrategy(level: String): DifficultyStrategy {
    return when (level.lowercase()) {
        "easy" -> object : DifficultyStrategy {
            override fun getMaxAttempts() = 15
            override fun getRange() = 1..50
            override fun getHintPenalty() = 0
        }
        
        "normal" -> object : DifficultyStrategy {
            override fun getMaxAttempts() = 10
            override fun getRange() = 1..100
            override fun getHintPenalty() = 1
        }
        
        "hard" -> object : DifficultyStrategy {
            override fun getMaxAttempts() = 7
            override fun getRange() = 1..200
            override fun getHintPenalty() = 2
        }
        
        else -> object : DifficultyStrategy {
            override fun getMaxAttempts() = 10
            override fun getRange() = 1..100
            override fun getHintPenalty() = 1
        }
    }
}

// ============================================================================
// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–®–ï–ù–ò–Ø
// ============================================================================

fun main() {
    println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    println("‚ïë  –†–ï–®–ï–ù–ò–ï –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø 2.1 (–¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞)                ‚ïë")
    println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    println()
    
    // –¢–µ—Å—Ç 1: Extension functions
    println("=== 1. Extension Functions ===\n")
    
    val numbers = listOf(5, 2, 8, 2, 9, 2, 7)
    println("–°–ø–∏—Å–æ–∫: $numbers")
    println("–ú–µ–¥–∏–∞–Ω–∞: ${numbers.median()}")
    println("–ú–æ–¥–∞: ${numbers.mode()}")
    println()
    
    val emptyList = emptyList<Int>()
    println("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫: $emptyList")
    println("–ú–µ–¥–∏–∞–Ω–∞: ${emptyList.median()}")
    println("–ú–æ–¥–∞: ${emptyList.mode()}")
    println()
    
    val range = 10..90
    println("–î–∏–∞–ø–∞–∑–æ–Ω: $range")
    println("–°–µ—Ä–µ–¥–∏–Ω–∞: ${range.middle}")
    println()
    
    val rangeStr = "20-80"
    val invalidRange = "20-10-5"
    println("–°—Ç—Ä–æ–∫–∞ '$rangeStr' -> ${rangeStr.toIntRange()}")
    println("–°—Ç—Ä–æ–∫–∞ '$invalidRange' -> ${invalidRange.toIntRange()}")
    println()
    
    // –¢–µ—Å—Ç 2: Inline functions
    println("=== 2. Inline Functions ===\n")
    
    measureExecutionTime("Sleep 50ms") {
        Thread.sleep(50)
    }
    println()
    
    val mixed: List<Any> = listOf(1, 2, "test", 3.5, 4, "data", 2.5)
    println("–°–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: $mixed")
    println("–°—É–º–º–∞ Int: ${mixed.sumByType<Int>()}")
    println("–°—É–º–º–∞ Double: ${mixed.sumByType<Double>()}")
    println()
    
    val mutableText = StringBuilder("hello")
    mutableText.applyIf(true) {
        append(" world")
    }.applyIf(false) {
        append(" ignored")
    }
    println("StringBuilder —Å applyIf: $mutableText")
    println()
    
    // –¢–µ—Å—Ç 3: –î–µ–ª–µ–≥–∞—Ç—ã
    println("=== 3. –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ ===\n")
    
    var limited by RangeDelegate(50, 0..100)
    println("RangeDelegate (0..100):")
    println("  –ù–∞—á–∞–ª—å–Ω–æ–µ: $limited")
    limited = 150
    println("  –ü–æ—Å–ª–µ 150: $limited")
    limited = -10
    println("  –ü–æ—Å–ª–µ -10: $limited")
    limited = 75
    println("  –ü–æ—Å–ª–µ 75: $limited")
    println()
    
    val historyDelegate = HistoryDelegate("initial", maxHistory = 3)
    var history by historyDelegate
    println("HistoryDelegate (max 3):")
    println("  –ù–∞—á–∞–ª—å–Ω–æ–µ: $history")
    history = "first"
    history = "second"
    history = "third"
    history = "fourth"
    println("  –ò—Å—Ç–æ—Ä–∏—è: ${historyDelegate.getHistory()}")
    println()
    
    // –¢–µ—Å—Ç 4: GameStatistics
    println("=== 4. GameStatistics ===\n")
    
    val stats = GameStatistics()
    Thread.sleep(100) // –∏–º–∏—Ç–∞—Ü–∏—è –∏–≥—Ä—ã
    listOf(50, 75, 62, 68, 70, 69).forEach { stats.addAttempt(it) }
    stats.hintsUsed = 3
    println(stats.generateReport())
    println()
    
    // –¢–µ—Å—Ç —Å –ø—Ä–æ–∏–≥—Ä—ã—à–µ–º
    val failedStats = GameStatistics()
    listOf(10, 20, 30, 40, 50, 60, 70, 80, 90, 100).forEach { 
        failedStats.addAttempt(it) 
    }
    failedStats.hintsUsed = 8
    println("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞:")
    println(failedStats.generateReport())
    println()
    
    // –¢–µ—Å—Ç 5: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
    println("=== 5. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–ë–æ–Ω—É—Å) ===\n")
    
    listOf("easy", "normal", "hard").forEach { level ->
        val strategy = createDifficultyStrategy(level)
        println("$level:")
        println("  –ü–æ–ø—ã—Ç–æ–∫: ${strategy.getMaxAttempts()}")
        println("  –î–∏–∞–ø–∞–∑–æ–Ω: ${strategy.getRange()}")
        println("  –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É: ${strategy.getHintPenalty()}")
        println()
    }
    
    // –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    println("=== –¢–ï–°–¢–´ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í ===\n")
    
    println("1. –ú–µ–¥–∏–∞–Ω–∞ —Å —á—ë—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
    val evenList = listOf(1, 2, 3, 4)
    println("  $evenList -> ${evenList.median()}")
    println()
    
    println("2. –ú–æ–¥–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–∞–∫—Å–∏–º—É–º–∞–º–∏:")
    val multiMode = listOf(1, 1, 2, 2, 3)
    println("  $multiMode -> ${multiMode.mode()}")
    println()
    
    println("3. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
    val negRange = "-50--10"
    println("  '$negRange' -> ${negRange.toIntRange()}")
    println()
    
    println("4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ hintsUsed –≤—ã—à–µ –ª–∏–º–∏—Ç–∞:")
    val testStats = GameStatistics()
    testStats.hintsUsed = 20
    println("  –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 20, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${testStats.hintsUsed}")
    println()
    
    println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    println("‚ïë  –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!                                 ‚ïë")
    println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
}

// ============================================================================
// –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø –î–õ–Ø –ú–ï–ù–¢–û–†–ê –ü–†–ò –ü–†–û–í–ï–†–ö–ï
// ============================================================================

/**
 * –û–ë–©–ò–ï –ö–†–ò–¢–ï–†–ò–ò –ü–†–û–í–ï–†–ö–ò:
 * 
 * 1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (60%):
 *    - –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
 *    - –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ (–ø—É—Å—Ç—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, null, –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
 *    - –ù–µ—Ç runtime –æ—à–∏–±–æ–∫
 * 
 * 2. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (20%):
 *    - –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å
 *    - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Kotlin
 *    - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * 3. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π (20%):
 *    - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ inline/reified
 *    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ª–µ–≥–∞—Ç–æ–≤
 *    - –ü–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
 * 
 * –¢–ò–ü–ò–ß–ù–´–ï –û–®–ò–ë–ö–ò –°–¢–£–î–ï–ù–¢–û–í:
 * 
 * 1. Extension functions:
 *    - –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
 *    - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —á—ë—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 *    - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ toIntRange()
 * 
 * 2. Inline functions:
 *    - –ó–∞–±—ã–≤–∞—é—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä inline
 *    - –ü—ã—Ç–∞—é—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reified –±–µ–∑ inline
 *    - –ù–µ —É—á–∏—Ç—ã–≤–∞—é—Ç, —á—Ç–æ element –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ Number
 * 
 * 3. –î–µ–ª–µ–≥–∞—Ç—ã:
 *    - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ getValue/setValue
 *    - –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
 *    - –ó–∞–±—ã–≤–∞—é—Ç –ø—Ä–æ coerceIn –≤ RangeDelegate
 * 
 * 4. GameStatistics:
 *    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ extension-—Ñ—É–Ω–∫—Ü–∏–∏
 *    - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º –¥–ª—è —Å–ø–∏—Å–∫–∞
 *    - –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç –≤—ã–≤–æ–¥
 * 
 * –í–û–ü–†–û–°–´ –î–õ–Ø –û–ë–°–£–ñ–î–ï–ù–ò–Ø –° –£–ß–ï–ù–ò–ö–û–ú:
 * 
 * 1. –ü–æ—á–µ–º—É reified —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å inline?
 * 2. –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º?
 * 3. –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å extension-—Ñ—É–Ω–∫—Ü–∏–∏, –∞ –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã?
 * 4. –ö–∞–∫–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ–∑–¥–∞—ë—Ç inline-—Ñ—É–Ω–∫—Ü–∏—è?
 * 5. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç lazy –¥–µ–ª–µ–≥–∞—Ç? –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ –æ–Ω?
 */
