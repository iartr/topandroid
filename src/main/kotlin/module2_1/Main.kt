package module2_1

/**
 * –ì–õ–ê–í–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê - –ú–æ–¥—É–ª—å 2.1
 * 
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è:
 * - Extension Functions
 * - Inline Functions (inline, reified, noinline, crossinline)
 * - Delegation (by keyword, delegated properties, –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
 *
 * 1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * 2. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –±–∞–π—Ç–∫–æ–¥: Tools ‚Üí Kotlin ‚Üí Show Kotlin Bytecode ‚Üí Decompile
 */
fun main() {
    println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    println("‚ïë  –ú–û–î–£–õ–¨ 2.1: –ü–†–û–î–í–ò–ù–£–¢–´–ô KOTLIN                              ‚ïë")
    println("‚ïë  –¢–µ–º—ã: Extensions, Inline, Reified, Delegation               ‚ïë")
    println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    println()
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Extension Functions
    demonstrateExtensions()
    println("\n" + "=".repeat(65) + "\n")
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Inline Functions
    demonstrateInlineFunctions()
    println("\n" + "=".repeat(65) + "\n")
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Delegation
    demonstrateDelegation()
    println("\n" + "=".repeat(65) + "\n")
    
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å: –º–∏–Ω–∏-–∏–≥—Ä–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    println("=== –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ì–†–ê ===\n")
    playEnhancedGame()
    
    println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    println("‚ïë  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê                                       ‚ïë")
    println("‚ïë                                                               ‚ïë")
    println("‚ïë  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:                                               ‚ïë")
    println("‚ïë  1. –ò–∑—É—á–∏—Ç–µ –±–∞–π—Ç–∫–æ–¥ (Tools ‚Üí Kotlin ‚Üí Show Kotlin Bytecode)  ‚ïë")
    println("‚ïë  2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ homework2_1/                 ‚ïë")
    println("‚ïë  3. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –∫–æ–¥–æ–º!                                ‚ïë")
    println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
}

/**
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.
 * 
 * –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:
 * - Extension functions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–∞–º–∏
 * - Inline functions –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - Reified –¥–ª—è type-safe –∫–æ–ª–ª–µ–∫—Ü–∏–π
 * - Delegated properties –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * - –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
 */
fun playEnhancedGame() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å observable
    class GameState {
        var attempts: Int by kotlin.properties.Delegates.observable(0) { _, _, new ->
            if (new <= 3) {
                println("  üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${10 - new} –ø–æ–ø—ã—Ç–æ–∫")
            }
        }
        
        // Lazy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞
        val secret: Int by lazy {
            println("  üé≤ –ó–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ...")
            (1..100).random()
        }
    }
    
    val state = GameState()
    val history = mutableListOf<Int>()
    
    // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    val hintStrategy = createHintStrategy(verbose = true)
    
    println("  –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ Kotlin!")
    println("  –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£ –≤–∞—Å 10 –ø–æ–ø—ã—Ç–æ–∫.\n")
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã —Å inline —Ñ—É–Ω–∫—Ü–∏–µ–π
    val gameTime = measureTimeMillis {
        // –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä—ã —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        val testGuesses = listOf(50, 75, 62, 68, 70, 71)
        
        for (guess in testGuesses) {
            state.attempts++
            history.add(guess)
            
            print("  –ü–æ–ø—ã—Ç–∫–∞ ${state.attempts}: $guess ‚Üí ")
            val hint = hintStrategy.giveHint(state.secret, guess)
            println(hint)
            
            if (guess == state.secret) {
                println("\n  üéâ –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${state.secret}!")
                break
            }
            
            if (state.attempts >= 10) {
                println("\n  üòî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ: ${state.secret}")
                break
            }
        }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º extension functions –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    println("\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:")
    println("  ${history.formatAsAttempts()}")
    println("  –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫: ${history.averageOrNull()?.let { "%.1f".format(it) } ?: "N/A"}")
    println("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ø—ã—Ç–∫–∏: ${history.lastN(3)}")
    println("  –í—Ä–µ–º—è –∏–≥—Ä—ã: $gameTime –º—Å")
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è reified: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    val mixedData: List<Any> = listOf(1, "test", 42, "data", history, 3.14)
    val numbersOnly = mixedData.filterByType<Int>()
    println("\n  üîç Reified –≤ –¥–µ–π—Å—Ç–≤–∏–∏:")
    println("  –°–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $mixedData")
    println("  –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞: $numbersOnly")
}
